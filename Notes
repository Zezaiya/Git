Git
概念：免费开源的分布式版本控制工具，可以管理从小型到大型的各种项目、
最初版本控制的问题：如果一个项目被多位程序员下载副本修改，而每一个程序员修改的内容又不相同，这样会导致项目修改的被一次次的新副本覆盖，最终永远都是最后一位程序员修改的副本（个人开发过渡到团队协作）
集中式版本控制工具（CVS,SVN,VSS):多个客户端拥有同一个集中管理的服务器，程序员取出最新版本修改后进行提交     弊端：如果中央服务器故障，任何人都无法提交和更新版本
分布式版本控制工具（git）：每一个客户端即是一个服务器，都可以对本地代码进行版本控制，每一个客户端拥有一个共同的远程库（如今的GitHub就是一个远程库），客户端可以将远程库的内容克隆到本地，修改后推送给远程库即可

   Git工作机制：Git为程序员提供了三个区域，程序员修改项目后依次会经历这三个区域：
                       工作区：比如我们在idea里写的代码，会存在本地磁盘目录里，这个目录文件就是工作区，可以修改
                                                   ↓
                       暂存区：通过git add指令后可以将我们写的代码添加到暂存区，可以修改
                                                   ↓
                       本地库：通过git commit指令后可以将我们写的代码提交到本地库并生成历史版本，不可直接修改当前版本的内容，但可以修改后生成新的版本
代码托管中心：是基于网络服务器的远程代码仓库，简称为远程库
             基于局域网的远程代码仓库：GitLab  比如一个公司写的代码不想推送到GitHub远程库上给别人看到，就可以自己搭建一个属于公司内部的远程库
             基于互联网的远程代码仓库：GitHub（国外） Gitee码云（国内）

Git常用命令
git config --global user.name    设置用户签名（使用一次即可）
git config --global user.email   设置用户邮箱（使用一次即可）

git init+项目路径                  初始化本地库（让git获取项目的管理权）
git status                        查看当前项目状态
git add+目录名                     将该目录文件添加到暂存区
git rm --cached+目录文件名          将该目录文件移除暂存区，但本地工作区仍然存在
git commit -m "版本名" 目录文件名    将该目录文件提交到本地库
git relog                         查看版本基本信息    git log 查看版本详细信息   （其中的16进制数表示的就是版本号，即该版本在本地库的地址-指针）
git reset --hard+版本号            回溯或穿越到某一版本 （本质上就是修改了Head头指针指向的master分支的地址）
----------------------------------------------------------------------------------------------------------------------------------
分支开发：在公司开发中，不同的程序员需要分别对项目的各个模块进行更新，所以我们可以建立一个主分支Master，各种模块为子分支进行共同更新，
        子分支的更新并不会影响主分支的运行，子分支也可以进行版本的更替，当子分支版本更新得较为稳定时可以与主分支合并，最终的版本就是该子分支的版本（子分支也是一个完整的项目）

分支的常用命令
git branch+分支名                  创建分支
git branch -v                     查看分支
git checkout+分支名                切换分支
git merge+分支名                   把指定的分支合并到当前分支上
  
产生冲突：两个程序员分别对同一版本的文件进行编写，当他们同时将编写后的文件与Master合并时，git将无法自动合并，需要人为取舍二者修改的内容

注意：合并分支后，git commit后面不能再加上文件名了，可以理解为这是几个人的成果不能一概而论
                                以上更偏向于个人的开发，并未涉及到团队协作
----------------------------------------------------------------------------------------------------------------------------------
团队协作开发（团队内协作/跨团队协作）

团队内协作（例如A如何获取B的版本）：
              B将自己的版本文件提交到本地库-->通过push指令将该文件上传到远程库-->A将远程库内的该文件通过clone指令克隆到自己的本地库
                           若A将B的文件进行修改后再上传到远程库,B可以通过pull指令获取A修改后的文件
跨团队协作:(例如A,B共享一个远程库,C共享另一个远程库,A欲获取C修改后的版本):
              A将自己的版本文件提交到本地库-->通过push指令将该文件上传到A.B的远程库-->C通过fork指令将对方远程库内的文件拷到自己的远程库中,
                            又通过clone指令将文件克隆到自己的本地库中进行修改,修改好后上传到自己的远程库,并向A发送Pull request请求,
                            A审核通过后就可以将其拷到自己的远程库中,通过merge指令将A远程库内的文件进行合并,最后通过pull获取该文件
注意:团队内协作时无需审核,而跨团队协作需要审核,所谓团队就是类似于GitHub里邀请的成员
----------------------------------------------------------------------------------------------------------------------------------
操作远程库基本语法
git push+远程库别名+分支       将该分支的文件提交到远程库     起别名的方法:git remote add+别名+真实的名字(一串链接)
git pull+远程库别名+分支       将远程库的文件拉取到该分支     拉取成功后git会自动提交到本地库(本地库和远程库的同步很重要)
git clone 远程库名            将指定远程库克隆到当前分支上   (会执行如下操作:拉取代码,初始化本地仓库,创建别名)
----------------------------------------------------------------------------------------------------------------------------------
Idea集成Git
创建忽略文件:在项目中有很多文件与实际功能无关,屏蔽掉它们有利于提高结构的可读性
在项目上面有一个VCS,点击启用git集成即可让Git管理该项目

集成Git后,项目内的颜色表示:  红色->项目未被添加(工作区)      绿色->项目添加成功,未被提交(暂存区)     白色->项目提交成功,无需提交(本地库)
