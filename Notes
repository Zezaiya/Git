Git
概念：免费开源的分布式版本控制工具，可以管理从小型到大型的各种项目、
最初版本控制的问题：如果一个项目被多位程序员下载副本修改，而每一个程序员修改的内容又不相同，这样会导致项目修改的被一次次的新副本覆盖，最终永远都是最后一位程序员修改的副本（个人开发过渡到团队协作）
集中式版本控制工具（CVS,SVN,VSS):多个客户端拥有同一个集中管理的服务器，程序员取出最新版本修改后进行提交     弊端：如果中央服务器故障，任何人都无法提交和更新版本
分布式版本控制工具（git）：每一个客户端即是一个服务器，都可以对本地代码进行版本控制，每一个客户端拥有一个共同的远程库（如今的GitHub就是一个远程库），客户端可以将远程库的内容克隆到本地，修改后推送给远程库即可

   Git工作机制：Git为程序员提供了三个区域，程序员修改项目后依次会经历这三个区域：
                       工作区：比如我们在idea里写的代码，会存在本地磁盘目录里，这个目录文件就是工作区，可以修改
                                                   ↓
                       暂存区：通过git add指令后可以将我们写的代码添加到暂存区，可以修改
                                                   ↓
                       本地库：通过git commit指令后可以将我们写的代码提交到本地库并生成历史版本，不可直接修改当前版本的内容，但可以修改后生成新的版本
代码托管中心：是基于网络服务器的远程代码仓库，简称为远程库
             基于局域网的远程代码仓库：GitLab  比如一个公司写的代码不想推送到GitHub远程库上给别人看到，就可以自己搭建一个属于公司内部的远程库
             基于互联网的远程代码仓库：GitHub（国外） Gitee码云（国内）

Git常用命令
git config --global user.name    设置用户签名（使用一次即可）
git config --global user.email   设置用户邮箱（使用一次即可）

git init+项目路径                  初始化本地库（让git获取项目的管理权）
git status                        查看当前项目状态
git add+目录名                     将该目录文件添加到暂存区
git rm --cached+目录文件名          将该目录文件移除暂存区，但本地工作区仍然存在
git commit -m "版本名" 目录文件名    将该目录文件提交到本地库
git relog                         查看版本基本信息    git log 查看版本详细信息   （其中的16进制数表示的就是版本号，即该版本在本地库的地址-指针）
git reset --hard+版本号            回溯或穿越到某一版本 （本质上就是修改了Head头指针指向的master分支的地址）
----------------------------------------------------------------------------------------------------------------------------------
分支开发：在公司开发中，不同的程序员需要分别对项目的各个模块进行更新，所以我们可以建立一个主干Master，各种模块为分支进行共同更新，
        分支的更新并不会影响主干的运行，分支也可以进行版本的更替，当分支版本更新得较为稳定时可以与主干合并，最终的版本就是该分支的版本（分支也是一个完整的项目）

分支的常用命令
git branch+分支名                  创建分支
git branch -v                     查看分支
git checkout+分支名                切换分支
git merge+分支名                   把指定的分支合并到当前分支上
  
产生冲突：

我在master里修改的内容
我又改了
1111

